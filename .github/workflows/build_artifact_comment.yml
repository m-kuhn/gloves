name: Write build artifact comments

on:
  workflow_run:
    workflows: 
      - ðŸªŸ Workflow A
      - ðŸªŸ Windows Qt6
    types:
      - completed

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  on-success:

    permissions:
      pull-requests: write

    runs-on: ubuntu-latest
    steps:
      - name: 'Download artifact'
        id: download_artifact
        uses: actions/github-script@v7
        with:
          script: |
            const allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            console.log(allArtifacts.data.artifacts[0]);
            let matchArtifacts = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "comment_artifacts"
            });
            if (matchArtifacts.length > 0)
            {
              let download = await github.rest.actions.downloadArtifact({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 artifact_id: matchArtifacts[0].id,
                 archive_format: 'zip',
              });
              let fs = require('fs');
              fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/data.zip`, Buffer.from(download.data));
              core.setOutput('artifact_id', matchArtifacts[0].id);
            }
            else
            {
              core.setOutput('artifact_id', 0);
            }

      - name: 'Unzip artifact'
        if: fromJSON(steps.download_artifact.outputs.artifact_id) > 0
        run: |
          unzip data.zip

      - name: 'Post artifact download link as comment on PR'
        if: fromJSON(steps.download_artifact.outputs.artifact_id) > 0
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            function updateCommentSection(prComments, title, body) {
              const sectionRegex = new RegExp(`(## ${title}\\n)([^##]*)`, 'm');
              
              // Check if the section with the title exists
              if (sectionRegex.test(prComments)) {
                return prComments.replace(sectionRegex, `$1${body}\n`);
              } else {
                // If the section doesn't exist, append the new section to the end
                return prComments.trim() + `\n\n## ${title}\n${body}\n`;
              }
            }

            const fs = require('fs');
            const data = JSON.parse(fs.readFileSync('comment.json', 'utf8'));

            const title = data.title;
            const body = data.body;
            const prNumber = data.pr_number;
            console.log(data)

            const prComments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const PREFIX = "# Build result";

            newPrComments = PREFIX + "\n\n" + updateCommentSection(prComments, title, body)

            const comment = prComments.data?.find(c => c.body.startsWith(PREFIX));
            if (!!comment) {
              // update the existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
                body: newPrComments
              });
            } else {
              // submit a new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number,
                body: newPrComments
              });
            }
