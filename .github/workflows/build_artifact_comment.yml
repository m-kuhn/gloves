name: Write build artifact comments

on:
  workflow_run:
    workflows: 
      - ðŸªŸ Workflow A
      - ðŸªŸ Windows Qt6
    types:
      - completed

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  on-success:

    permissions:
      pull-requests: write

    runs-on: ubuntu-latest
    steps:
      - name: 'Download artifact'
        id: download_artifact
        uses: actions/github-script@v7
        with:
          script: |
            const allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            console.log(allArtifacts.data.artifacts[0]);
            let matchArtifacts = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "comment_artifacts"
            });
            if (matchArtifacts.length > 0)
            {
              let download = await github.rest.actions.downloadArtifact({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 artifact_id: matchArtifacts[0].id,
                 archive_format: 'zip',
              });
              let fs = require('fs');
              fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/data.zip`, Buffer.from(download.data));
              core.setOutput('artifact_id', matchArtifacts[0].id);
            }
            else
            {
              core.setOutput('artifact_id', 0);
            }

      - name: 'Unzip artifact'
        if: fromJSON(steps.download_artifact.outputs.artifact_id) > 0
        run: |
          unzip data.zip

      - name: 'Post artifact download link as comment on PR'
        if: fromJSON(steps.download_artifact.outputs.artifact_id) > 0
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            function updateCommentSection(prComment, title, body) {
              const sectionRegex = new RegExp(`(## ${title}\\n)([^##]*)`, 'm');
              
              // Check if the section with the title exists
              if (sectionRegex.test(prComment)) {
                return prComment.replace(sectionRegex, `$1${body}\n`);
              } else {
                // If the section doesn't exist, append the new section to the end
                return prComment.trim() + `\n\n## ${title}\n${body}\n`;
              }
            }
            const fs = require('fs');
            const path = require('path');

            // Read all files matching the pattern 'comment*.json'
            const files = fs.readdirSync('.').filter(file => file.startsWith('comment') && file.endsWith('.json'));

            if (files.length === 0) {
              console.log('No comment*.json files found');
              return;
            }

            // Take the PR number from the first file
            const dataSample = JSON.parse(fs.readFileSync(files[0], 'utf8'));
            const prNumber = dataSample.pr_number;

            const prComments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const PREFIX = "# Build result";

            // Find the comment that starts with the specified PREFIX
            const comment = prComments.data?.find(c => c.body.startsWith(PREFIX));

            let newPrComment;

            // Loop through all the comment*.json files
            for (const file of files) {
                try {
                    const data = JSON.parse(fs.readFileSync(file, 'utf8'));

                    const title = data.title;
                    const body = data.body;
                    console.debug(data);

                    // Update the PR comment with the section for the current title and body
                    if (!!comment) {
                      newPrComment = updateCommentSection(comment.body, title, body);
                    } else {
                      // If no existing comment, create a new one with the current title and body
                      newPrComment = PREFIX + "\n\n" + updateCommentSection("", title, body);
                    }
                } catch (error) {
                    console.error(`Failed to process file ${file}: ${error.message}`);
                }
            }

            // Update or create the PR comment after processing all the files
            if (!!comment) {
              // Update the existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
                body: newPrComment
              });
            } else {
              // Create a new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: newPrComment
              });
            }
