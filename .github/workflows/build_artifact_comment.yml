name: Write build artifact comments

on:
  workflow_run:
    workflows:
      - "ðŸªŸ MingW64 Windows 64bit Build"
      - "ðŸªŸ Windows Qt6"
    types:
      - completed

permissions:
  contents: read

jobs:
  on-success:
    permissions:
      pull-requests: write

    runs-on: ubuntu-latest
    steps:
      - name: 'Download artifact'
        id: download_artifact
        uses: actions/github-script@v7
        with:
          script: |
            const artifactName = context.payload.workflow_run.name.includes("MingW64") ? "QGIS for Windows 64bit" : "qgis-windows-qt6";
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });
            const artifact = artifacts.data.artifacts.find(a => a.name == artifactName);
            if (artifact) {
              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: 'zip',
              });
              const fs = require('fs');
              fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/${artifactName}`, Buffer.from(download.data));
              core.setOutput('artifact_url', `${context.repo.owner}/${context.repo.repo}/suites/${context.payload.workflow_run.check_suite_id}/artifacts/${artifact.id}`);
            } else {
              core.setOutput('artifact_url', '');
            }

      - name: 'Post or update PR comment'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const issue_number = Number(fs.readFileSync('./pr_number'));
            const git_sha = String(fs.readFileSync('./git_commit')).trim();
            const artifactUrl = steps.download_artifact.outputs.artifact_url;
            const buildType = context.payload.workflow_run.name.includes("MingW64") ? "Windows" : "Qt6";
            const bodyPart = artifactUrl ? `${buildType} builds of this PR are available for testing [here](https://github.com/${artifactUrl}).` : `${buildType} build N/A`;
            
            const prComments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
            });
            const commentPrefix = "## ðŸªŸ Build Details";
            const existingComment = prComments.data.find(comment => comment.body.startsWith(commentPrefix));
            let newBody;

            if (existingComment) {
              const regex = new RegExp(`(## ${buildType} builds ready![\\s\\S]*?)(?=(## (Windows|Qt6) builds ready!|$))`, "g");
              const replacement = `## ${buildType} builds ready!\n\n${bodyPart}\n\n`;
              if (existingComment.body.includes(`## ${buildType} builds ready!`)) {
                newBody = existingComment.body.replace(regex, replacement);
              } else {
                newBody = existingComment.body + replacement;
              }
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: newBody
              });
            } else {
              newBody = `${commentPrefix}\n\n${replacement}\n\n*(Built from commit ${git_sha})*`;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number,
                body: newBody
              });
            }
